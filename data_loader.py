# -*- coding: utf-8 -*-
"""data_loader.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jP-IMJJg4sIUy1Uz58SHFbpakTN2MKYF
"""

import os
import zipfile
import torch
import numpy as np
from torch.utils.data import TensorDataset
from torchvision import transforms
from PIL import Image
import config2 as config
from embedding_model import upload_model
import importlib





# Define transformation pipeline
transform = transforms.Compose([
    transforms.Grayscale(num_output_channels=3),
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

def unzip_files(files_path):
    """Extracts all ZIP files in a given directory."""
    for file in os.listdir(files_path):
        if file.endswith('.zip'):
            file_path = os.path.join(files_path, file)
            print(f"Extracting {file}...")
            with zipfile.ZipFile(file_path, 'r') as zip_ref:
                zip_ref.extractall(files_path)
                print(f"{file} extracted to {files_path}")


def load_transformed_samples(label, data_path, embedding_model):
    """Loads spectrograms, extracts embeddings using ViT, and returns embeddings + labels."""
    all_embeddings, all_labels = [], []
    path = os.path.join(data_path, label)

    for file in os.listdir(path):
        if file.endswith('.npy'):
            file_path = os.path.join(path, file)
            data = np.load(file_path)

            # Normalize and scale
            data = ((data - np.min(data)) / (np.max(data) - np.min(data) + 1e-8)) * 255
            data = data.astype(np.uint8)

            # Convert NumPy array to PIL image and apply transforms
            image = Image.fromarray(data, mode="L")  # Convert to grayscale PIL image
            transformed_image = transform(image)  # Apply resize + normalization

            #Extract embeddings from ViT model
            transformed_image = transformed_image.unsqueeze(0).to("cuda")  # Add batch dimension
            with torch.no_grad():
                embedding = embedding_model(transformed_image).cpu().squeeze()  # Extract features

            all_embeddings.append(embedding)

            # Assign label based on filename
            label_name = next((key for key in config.args.label_dict.keys() if file.startswith(key)), None)
            if label_name is None:
                print(f"Warning: Unknown label in {file}, skipping...")
                continue
            all_labels.append(config.args.label_dict[label_name])

    # Convert list of embeddings to TensorDataset
    if all_embeddings:
        embeddings_tensor = torch.stack(all_embeddings)
        labels_tensor = torch.tensor(all_labels, dtype=torch.long)

        embeddings_data_set = TensorDataset(embeddings_tensor, labels_tensor)
        save_path = os.path.join(config.args.embedding_save_path, f"{label}.pt")
        if not os.path.exists(config.args.embedding_save_path):
            os.makedirs(config.args.embedding_save_path)
        torch.save(embeddings_data_set, save_path)
        return embeddings_data_set
    else:
        print(f"No data found in {path}")
        return None